import React, { Component } from 'react';

//promote to container w/ connect from react-redux
import { connect } from 'react-redux';

//import action creator selectBook

import { selectProject } from '../actions/index';

//import fxn from redux that we use to make sure the action generated by action creator actually flows 
//through all the different reducers in App

import { bindActionCreators } from 'redux';

class ProjectList extends Component {
	//mapp over book list that list each book title in the list
	//change to renderFeatureLis
	renderList() {
		
		return this.props.projects.filter((project) => {
			// first check to see if project is featured
			return project.featured;
		}).map((project) => {
			return (
					<li 
						key={project.title} 
						onClick={()=> this.props.selectProject(project)}	
						className="list-group-item projectItem">
						<p className="projectListNumber">{project.number}.</p>
						<h1 className="projectListTitle">{project.title}</h1>
					</li>
				);
		});
	}

	//calls renderList fxn
	
	render() {
		return (
			
				<div className="col-md-3 projectListGroup">
					<ul className="list-group">
						{this.renderList()}
					</ul>
				</div>
			
		)
	}
	// render() {
	// 	return (
	// 		<section className="projectSection container-fluid">
	// 			<div className="row">
	// 				<ul className="list-group col-md-4">
	// 					{this.renderList()}
	// 				</ul>
	// 			</div>
	// 		</section>
	// 	)
	// }

}

//function that takes in entire app state and whatever is returned will show up in props inside of BookList; 
//this will be available to component as props.  This function is glue between react / redux.  books reducer is 
//returning books (from state.books).



function mapStateToProps(state) {
	return {
		projects: state.projects
	};
}

//anything returned from this function will end up as props on the BookList container
function mapDispatchToProps(dispatch) {
	//What bindActionsCreators is doing w/ dispatch fxn => Whenever selectBook is called, the result should be passed 
	//to all of our reducers.  Dispatch function receives all the fxns and spits them out to all the reducers w/n app
	//passing object w/ key selectBook and value selectBook, whatever we pass through the fxn will be available to props 
	//(i.e. this.props.selectbook)
	return bindActionCreators({ selectProject: selectProject}, dispatch)
}

//make use of connect, two set of 
//whenever state changes, container BookList will instantly re-render, object in state fxn will be assigned to props
//add arguments to connect 
//promote booklist from component to a container - it needs to know abou this new dispatch method, selectBook. Make it 
//available as a prop
export default connect(mapStateToProps, mapDispatchToProps)(ProjectList);